
#include <iostream>
#include <string>
#include <cstdint>
#include <algorithm>
#include <iomanip>
using std::string,std::cout,std::endl;

#include <vector>
#include "intelConstants.h"
#include "PE.h"
#include "ELF.h"



int main() {
    debugInstructionOutput=true;
    bitMode=64;
    std::ofstream tmp("tmp-2.exe", std::ios::binary);
    ADD(tmp,"rax","rax");
    ADD(tmp,"rax","rcx");
    ADD(tmp,"rax","-300");
    ADD(tmp,"rax","-80");
    ADD(tmp,"rax","1000");
    ADD(tmp,"rax","80");
    ADD(tmp,"rax","300");
    ADD(tmp,"rax","[rax]");
    ADD(tmp,"rax","[rcx]");
    ADD(tmp,"rax","[rax+rax*2]");
    ADD(tmp,"rax","[rcx+rax*2]");
    ADD(tmp,"rax","[rax*2]");
    ADD(tmp,"rax","[rax+rcx*8]");
    ADD(tmp,"rax","[rcx+rcx*8]");
    ADD(tmp,"rax","[rcx*8]");
    ADD(tmp,"rax","[rax-520]");
    ADD(tmp,"rax","[rcx-520]");
    ADD(tmp,"rax","[rax+rax*2-520]");
    ADD(tmp,"rax","[rcx+rax*2-520]");
    ADD(tmp,"rax","[rax*2-520]");
    ADD(tmp,"rax","[rax+rcx*8-520]");
    ADD(tmp,"rax","[rcx+rcx*8-520]");
    ADD(tmp,"rax","[rcx*8-520]");
    ADD(tmp,"rax","[-520]");
    ADD(tmp,"rax","[rax-100]");
    ADD(tmp,"rax","[rcx-100]");
    ADD(tmp,"rax","[rax+rax*2-100]");
    ADD(tmp,"rax","[rcx+rax*2-100]");
    ADD(tmp,"rax","[rax*2-100]");
    ADD(tmp,"rax","[rax+rcx*8-100]");
    ADD(tmp,"rax","[rcx+rcx*8-100]");
    ADD(tmp,"rax","[rcx*8-100]");
    ADD(tmp,"rax","[-100]");
    ADD(tmp,"rax","[rax+0]");
    ADD(tmp,"rax","[rcx+0]");
    ADD(tmp,"rax","[rax+rax*2+0]");
    ADD(tmp,"rax","[rcx+rax*2+0]");
    ADD(tmp,"rax","[rax*2+0]");
    ADD(tmp,"rax","[rax+rcx*8+0]");
    ADD(tmp,"rax","[rcx+rcx*8+0]");
    ADD(tmp,"rax","[rcx*8+0]");
    ADD(tmp,"rax","[0]");
    ADD(tmp,"rax","[rax+120]");
    ADD(tmp,"rax","[rcx+120]");
    ADD(tmp,"rax","[rax+rax*2+120]");
    ADD(tmp,"rax","[rcx+rax*2+120]");
    ADD(tmp,"rax","[rax*2+120]");
    ADD(tmp,"rax","[rax+rcx*8+120]");
    ADD(tmp,"rax","[rcx+rcx*8+120]");
    ADD(tmp,"rax","[rcx*8+120]");
    ADD(tmp,"rax","[120]");
    ADD(tmp,"rax","[rax+1200]");
    ADD(tmp,"rax","[rcx+1200]");
    ADD(tmp,"rax","[rax+rax*2+1200]");
    ADD(tmp,"rax","[rcx+rax*2+1200]");
    ADD(tmp,"rax","[rax*2+1200]");
    ADD(tmp,"rax","[rax+rcx*8+1200]");
    ADD(tmp,"rax","[rcx+rcx*8+1200]");
    ADD(tmp,"rax","[rcx*8+1200]");
    ADD(tmp,"rax","[1200]");

    ADD(tmp,"rcx","rax");
    ADD(tmp,"rcx","rcx");
    ADD(tmp,"rcx","-300");
    ADD(tmp,"rcx","-80");
    ADD(tmp,"rcx","1000");
    ADD(tmp,"rcx","80");
    ADD(tmp,"rcx","300");
    ADD(tmp,"rcx","[rax]");
    ADD(tmp,"rcx","[rcx]");
    ADD(tmp,"rcx","[rax+rax*2]");
    ADD(tmp,"rcx","[rcx+rax*2]");
    ADD(tmp,"rcx","[rax*2]");
    ADD(tmp,"rcx","[rax+rcx*8]");
    ADD(tmp,"rcx","[rcx+rcx*8]");
    ADD(tmp,"rcx","[rcx*8]");
    ADD(tmp,"rcx","[rax-520]");
    ADD(tmp,"rcx","[rcx-520]");
    ADD(tmp,"rcx","[rax+rax*2-520]");
    ADD(tmp,"rcx","[rcx+rax*2-520]");
    ADD(tmp,"rcx","[rax*2-520]");
    ADD(tmp,"rcx","[rax+rcx*8-520]");
    ADD(tmp,"rcx","[rcx+rcx*8-520]");
    ADD(tmp,"rcx","[rcx*8-520]");
    ADD(tmp,"rcx","[-520]");
    ADD(tmp,"rcx","[rax-100]");
    ADD(tmp,"rcx","[rcx-100]");
    ADD(tmp,"rcx","[rax+rax*2-100]");
    ADD(tmp,"rcx","[rcx+rax*2-100]");
    ADD(tmp,"rcx","[rax*2-100]");
    ADD(tmp,"rcx","[rax+rcx*8-100]");
    ADD(tmp,"rcx","[rcx+rcx*8-100]");
    ADD(tmp,"rcx","[rcx*8-100]");
    ADD(tmp,"rcx","[-100]");
    ADD(tmp,"rcx","[rax+0]");
    ADD(tmp,"rcx","[rcx+0]");
    ADD(tmp,"rcx","[rax+rax*2+0]");
    ADD(tmp,"rcx","[rcx+rax*2+0]");
    ADD(tmp,"rcx","[rax*2+0]");
    ADD(tmp,"rcx","[rax+rcx*8+0]");
    ADD(tmp,"rcx","[rcx+rcx*8+0]");
    ADD(tmp,"rcx","[rcx*8+0]");
    ADD(tmp,"rcx","[0]");
    ADD(tmp,"rcx","[rax+120]");
    ADD(tmp,"rcx","[rcx+120]");
    ADD(tmp,"rcx","[rax+rax*2+120]");
    ADD(tmp,"rcx","[rcx+rax*2+120]");
    ADD(tmp,"rcx","[rax*2+120]");
    ADD(tmp,"rcx","[rax+rcx*8+120]");
    ADD(tmp,"rcx","[rcx+rcx*8+120]");
    ADD(tmp,"rcx","[rcx*8+120]");
    ADD(tmp,"rcx","[120]");
    ADD(tmp,"rcx","[rax+1200]");
    ADD(tmp,"rcx","[rcx+1200]");
    ADD(tmp,"rcx","[rax+rax*2+1200]");
    ADD(tmp,"rcx","[rcx+rax*2+1200]");
    ADD(tmp,"rcx","[rax*2+1200]");
    ADD(tmp,"rcx","[rax+rcx*8+1200]");
    ADD(tmp,"rcx","[rcx+rcx*8+1200]");
    ADD(tmp,"rcx","[rcx*8+1200]");
    ADD(tmp,"rcx","[1200]");
    
    ADD(tmp,"[rax]", "rcx");
    ADD(tmp,"[rcx]", "rcx");
    ADD(tmp,"[rax+rax*2]", "rcx");
    ADD(tmp,"[rcx+rax*2]", "rcx");
    ADD(tmp,"[rax*2]", "rcx");
    ADD(tmp,"[rax+rcx*8]", "rcx");
    ADD(tmp,"[rcx+rcx*8]", "rcx");
    ADD(tmp,"[rcx*8]", "rcx");
    ADD(tmp,"[rax-520]", "rcx");
    ADD(tmp,"[rcx-520]", "rcx");
    ADD(tmp,"[rax+rax*2-520]", "rcx");
    ADD(tmp,"[rcx+rax*2-520]", "rcx");
    ADD(tmp,"[rax*2-520]", "rcx");
    ADD(tmp,"[rax+rcx*8-520]", "rcx");
    ADD(tmp,"[rcx+rcx*8-520]", "rcx");
    ADD(tmp,"[rcx*8-520]", "rcx");
    ADD(tmp,"[-520]", "rcx");
    ADD(tmp,"[rax-100]", "rcx");
    ADD(tmp,"[rcx-100]", "rcx");
    ADD(tmp,"[rax+rax*2-100]", "rcx");
    ADD(tmp,"[rcx+rax*2-100]", "rcx");
    ADD(tmp,"[rax*2-100]", "rcx");
    ADD(tmp,"[rax+rcx*8-100]", "rcx");
    ADD(tmp,"[rcx+rcx*8-100]", "rcx");
    ADD(tmp,"[rcx*8-100]", "rcx");
    ADD(tmp,"[-100]", "rcx");
    ADD(tmp,"[rax+0]", "rcx");
    ADD(tmp,"[rcx+0]", "rcx");
    ADD(tmp,"[rax+rax*2+0]", "rcx");
    ADD(tmp,"[rcx+rax*2+0]", "rcx");
    ADD(tmp,"[rax*2+0]", "rcx");
    ADD(tmp,"[rax+rcx*8+0]", "rcx");
    ADD(tmp,"[rcx+rcx*8+0]", "rcx");
    ADD(tmp,"[rcx*8+0]", "rcx");
    ADD(tmp,"[0]", "rcx");
    ADD(tmp,"[rax+120]", "rcx");
    ADD(tmp,"[rcx+120]", "rcx");
    ADD(tmp,"[rax+rax*2+120]", "rcx");
    ADD(tmp,"[rcx+rax*2+120]", "rcx");
    ADD(tmp,"[rax*2+120]", "rcx");
    ADD(tmp,"[rax+rcx*8+120]", "rcx");
    ADD(tmp,"[rcx+rcx*8+120]", "rcx");
    ADD(tmp,"[rcx*8+120]", "rcx");
    ADD(tmp,"[120]", "rcx");
    ADD(tmp,"[rax+1200]", "rcx");
    ADD(tmp,"[rcx+1200]", "rcx");
    ADD(tmp,"[rax+rax*2+1200]", "rcx");
    ADD(tmp,"[rcx+rax*2+1200]", "rcx");
    ADD(tmp,"[rax*2+1200]", "rcx");
    ADD(tmp,"[rax+rcx*8+1200]", "rcx");
    ADD(tmp,"[rcx+rcx*8+1200]", "rcx");
    ADD(tmp,"[rcx*8+1200]", "rcx");
    ADD(tmp,"[1200]", "rcx");
    
    ADD(tmp,"[rax]", "-500");
    ADD(tmp,"[rcx]", "-500");
    ADD(tmp,"[rax+rax*2]", "-500");
    ADD(tmp,"[rcx+rax*2]", "-500");
    ADD(tmp,"[rax*2]", "-500");
    ADD(tmp,"[rax+rcx*8]", "-500");
    ADD(tmp,"[rcx+rcx*8]", "-500");
    ADD(tmp,"[rcx*8]", "-500");
    ADD(tmp,"[rax-520]", "-500");
    ADD(tmp,"[rcx-520]", "-500");
    ADD(tmp,"[rax+rax*2-520]", "-500");
    ADD(tmp,"[rcx+rax*2-520]", "-500");
    ADD(tmp,"[rax*2-520]", "-500");
    ADD(tmp,"[rax+rcx*8-520]", "-500");
    ADD(tmp,"[rcx+rcx*8-520]", "-500");
    ADD(tmp,"[rcx*8-520]", "-500");
    ADD(tmp,"[-520]", "-500");
    ADD(tmp,"[rax-100]", "-500");
    ADD(tmp,"[rcx-100]", "-500");
    ADD(tmp,"[rax+rax*2-100]", "-500");
    ADD(tmp,"[rcx+rax*2-100]", "-500");
    ADD(tmp,"[rax*2-100]", "-500");
    ADD(tmp,"[rax+rcx*8-100]", "-500");
    ADD(tmp,"[rcx+rcx*8-100]", "-500");
    ADD(tmp,"[rcx*8-100]", "-500");
    ADD(tmp,"[-100]", "-500");
    ADD(tmp,"[rax+0]", "-500");
    ADD(tmp,"[rcx+0]", "-500");
    ADD(tmp,"[rax+rax*2+0]", "-500");
    ADD(tmp,"[rcx+rax*2+0]", "-500");
    ADD(tmp,"[rax*2+0]", "-500");
    ADD(tmp,"[rax+rcx*8+0]", "-500");
    ADD(tmp,"[rcx+rcx*8+0]", "-500");
    ADD(tmp,"[rcx*8+0]", "-500");
    ADD(tmp,"[0]", "-500");
    ADD(tmp,"[rax+120]", "-500");
    ADD(tmp,"[rcx+120]", "-500");
    ADD(tmp,"[rax+rax*2+120]", "-500");
    ADD(tmp,"[rcx+rax*2+120]", "-500");
    ADD(tmp,"[rax*2+120]", "-500");
    ADD(tmp,"[rax+rcx*8+120]", "-500");
    ADD(tmp,"[rcx+rcx*8+120]", "-500");
    ADD(tmp,"[rcx*8+120]", "-500");
    ADD(tmp,"[120]", "-500");
    ADD(tmp,"[rax+1200]", "-500");
    ADD(tmp,"[rcx+1200]", "-500");
    ADD(tmp,"[rax+rax*2+1200]", "-500");
    ADD(tmp,"[rcx+rax*2+1200]", "-500");
    ADD(tmp,"[rax*2+1200]", "-500");
    ADD(tmp,"[rax+rcx*8+1200]", "-500");
    ADD(tmp,"[rcx+rcx*8+1200]", "-500");
    ADD(tmp,"[rcx*8+1200]", "-500");
    ADD(tmp,"[1200]", "-500");
    
    ADD(tmp,"[rax]", "-20");
    ADD(tmp,"[rcx]", "-20");
    ADD(tmp,"[rax+rax*2]", "-20");
    ADD(tmp,"[rcx+rax*2]", "-20");
    ADD(tmp,"[rax*2]", "-20");
    ADD(tmp,"[rax+rcx*8]", "-20");
    ADD(tmp,"[rcx+rcx*8]", "-20");
    ADD(tmp,"[rcx*8]", "-20");
    ADD(tmp,"[rax-520]", "-20");
    ADD(tmp,"[rcx-520]", "-20");
    ADD(tmp,"[rax+rax*2-520]", "-20");
    ADD(tmp,"[rcx+rax*2-520]", "-20");
    ADD(tmp,"[rax*2-520]", "-20");
    ADD(tmp,"[rax+rcx*8-520]", "-20");
    ADD(tmp,"[rcx+rcx*8-520]", "-20");
    ADD(tmp,"[rcx*8-520]", "-20");
    ADD(tmp,"[-520]", "-20");
    ADD(tmp,"[rax-100]", "-20");
    ADD(tmp,"[rcx-100]", "-20");
    ADD(tmp,"[rax+rax*2-100]", "-20");
    ADD(tmp,"[rcx+rax*2-100]", "-20");
    ADD(tmp,"[rax*2-100]", "-20");
    ADD(tmp,"[rax+rcx*8-100]", "-20");
    ADD(tmp,"[rcx+rcx*8-100]", "-20");
    ADD(tmp,"[rcx*8-100]", "-20");
    ADD(tmp,"[-100]", "-20");
    ADD(tmp,"[rax+0]", "-20");
    ADD(tmp,"[rcx+0]", "-20");
    ADD(tmp,"[rax+rax*2+0]", "-20");
    ADD(tmp,"[rcx+rax*2+0]", "-20");
    ADD(tmp,"[rax*2+0]", "-20");
    ADD(tmp,"[rax+rcx*8+0]", "-20");
    ADD(tmp,"[rcx+rcx*8+0]", "-20");
    ADD(tmp,"[rcx*8+0]", "-20");
    ADD(tmp,"[0]", "-20");
    ADD(tmp,"[rax+120]", "-20");
    ADD(tmp,"[rcx+120]", "-20");
    ADD(tmp,"[rax+rax*2+120]", "-20");
    ADD(tmp,"[rcx+rax*2+120]", "-20");
    ADD(tmp,"[rax*2+120]", "-20");
    ADD(tmp,"[rax+rcx*8+120]", "-20");
    ADD(tmp,"[rcx+rcx*8+120]", "-20");
    ADD(tmp,"[rcx*8+120]", "-20");
    ADD(tmp,"[120]", "-20");
    ADD(tmp,"[rax+1200]", "-20");
    ADD(tmp,"[rcx+1200]", "-20");
    ADD(tmp,"[rax+rax*2+1200]", "-20");
    ADD(tmp,"[rcx+rax*2+1200]", "-20");
    ADD(tmp,"[rax*2+1200]", "-20");
    ADD(tmp,"[rax+rcx*8+1200]", "-20");
    ADD(tmp,"[rcx+rcx*8+1200]", "-20");
    ADD(tmp,"[rcx*8+1200]", "-20");
    ADD(tmp,"[1200]", "-20");
    
    ADD(tmp,"[rax]", "0");
    ADD(tmp,"[rcx]", "0");
    ADD(tmp,"[rax+rax*2]", "0");
    ADD(tmp,"[rcx+rax*2]", "0");
    ADD(tmp,"[rax*2]", "0");
    ADD(tmp,"[rax+rcx*8]", "0");
    ADD(tmp,"[rcx+rcx*8]", "0");
    ADD(tmp,"[rcx*8]", "0");
    ADD(tmp,"[rax-520]", "0");
    ADD(tmp,"[rcx-520]", "0");
    ADD(tmp,"[rax+rax*2-520]", "0");
    ADD(tmp,"[rcx+rax*2-520]", "0");
    ADD(tmp,"[rax*2-520]", "0");
    ADD(tmp,"[rax+rcx*8-520]", "0");
    ADD(tmp,"[rcx+rcx*8-520]", "0");
    ADD(tmp,"[rcx*8-520]", "0");
    ADD(tmp,"[-520]", "0");
    ADD(tmp,"[rax-100]", "0");
    ADD(tmp,"[rcx-100]", "0");
    ADD(tmp,"[rax+rax*2-100]", "0");
    ADD(tmp,"[rcx+rax*2-100]", "0");
    ADD(tmp,"[rax*2-100]", "0");
    ADD(tmp,"[rax+rcx*8-100]", "0");
    ADD(tmp,"[rcx+rcx*8-100]", "0");
    ADD(tmp,"[rcx*8-100]", "0");
    ADD(tmp,"[-100]", "0");
    ADD(tmp,"[rax+0]", "0");
    ADD(tmp,"[rcx+0]", "0");
    ADD(tmp,"[rax+rax*2+0]", "0");
    ADD(tmp,"[rcx+rax*2+0]", "0");
    ADD(tmp,"[rax*2+0]", "0");
    ADD(tmp,"[rax+rcx*8+0]", "0");
    ADD(tmp,"[rcx+rcx*8+0]", "0");
    ADD(tmp,"[rcx*8+0]", "0");
    ADD(tmp,"[0]", "0");
    ADD(tmp,"[rax+120]", "0");
    ADD(tmp,"[rcx+120]", "0");
    ADD(tmp,"[rax+rax*2+120]", "0");
    ADD(tmp,"[rcx+rax*2+120]", "0");
    ADD(tmp,"[rax*2+120]", "0");
    ADD(tmp,"[rax+rcx*8+120]", "0");
    ADD(tmp,"[rcx+rcx*8+120]", "0");
    ADD(tmp,"[rcx*8+120]", "0");
    ADD(tmp,"[120]", "0");
    ADD(tmp,"[rax+1200]", "0");
    ADD(tmp,"[rcx+1200]", "0");
    ADD(tmp,"[rax+rax*2+1200]", "0");
    ADD(tmp,"[rcx+rax*2+1200]", "0");
    ADD(tmp,"[rax*2+1200]", "0");
    ADD(tmp,"[rax+rcx*8+1200]", "0");
    ADD(tmp,"[rcx+rcx*8+1200]", "0");
    ADD(tmp,"[rcx*8+1200]", "0");
    ADD(tmp,"[1200]", "0");
    
    ADD(tmp,"[rax]", "10");
    ADD(tmp,"[rcx]", "10");
    ADD(tmp,"[rax+rax*2]", "10");
    ADD(tmp,"[rcx+rax*2]", "10");
    ADD(tmp,"[rax*2]", "10");
    ADD(tmp,"[rax+rcx*8]", "10");
    ADD(tmp,"[rcx+rcx*8]", "10");
    ADD(tmp,"[rcx*8]", "10");
    ADD(tmp,"[rax-520]", "10");
    ADD(tmp,"[rcx-520]", "10");
    ADD(tmp,"[rax+rax*2-520]", "10");
    ADD(tmp,"[rcx+rax*2-520]", "10");
    ADD(tmp,"[rax*2-520]", "10");
    ADD(tmp,"[rax+rcx*8-520]", "10");
    ADD(tmp,"[rcx+rcx*8-520]", "10");
    ADD(tmp,"[rcx*8-520]", "10");
    ADD(tmp,"[-520]", "10");
    ADD(tmp,"[rax-100]", "10");
    ADD(tmp,"[rcx-100]", "10");
    ADD(tmp,"[rax+rax*2-100]", "10");
    ADD(tmp,"[rcx+rax*2-100]", "10");
    ADD(tmp,"[rax*2-100]", "10");
    ADD(tmp,"[rax+rcx*8-100]", "10");
    ADD(tmp,"[rcx+rcx*8-100]", "10");
    ADD(tmp,"[rcx*8-100]", "10");
    ADD(tmp,"[-100]", "10");
    ADD(tmp,"[rax+0]", "10");
    ADD(tmp,"[rcx+0]", "10");
    ADD(tmp,"[rax+rax*2+0]", "10");
    ADD(tmp,"[rcx+rax*2+0]", "10");
    ADD(tmp,"[rax*2+0]", "10");
    ADD(tmp,"[rax+rcx*8+0]", "10");
    ADD(tmp,"[rcx+rcx*8+0]", "10");
    ADD(tmp,"[rcx*8+0]", "10");
    ADD(tmp,"[0]", "10");
    ADD(tmp,"[rax+120]", "10");
    ADD(tmp,"[rcx+120]", "10");
    ADD(tmp,"[rax+rax*2+120]", "10");
    ADD(tmp,"[rcx+rax*2+120]", "10");
    ADD(tmp,"[rax*2+120]", "10");
    ADD(tmp,"[rax+rcx*8+120]", "10");
    ADD(tmp,"[rcx+rcx*8+120]", "10");
    ADD(tmp,"[rcx*8+120]", "10");
    ADD(tmp,"[120]", "10");
    ADD(tmp,"[rax+1200]", "10");
    ADD(tmp,"[rcx+1200]", "10");
    ADD(tmp,"[rax+rax*2+1200]", "10");
    ADD(tmp,"[rcx+rax*2+1200]", "10");
    ADD(tmp,"[rax*2+1200]", "10");
    ADD(tmp,"[rax+rcx*8+1200]", "10");
    ADD(tmp,"[rcx+rcx*8+1200]", "10");
    ADD(tmp,"[rcx*8+1200]", "10");
    ADD(tmp,"[1200]", "10");
    
    ADD(tmp,"[rax]", "1000");
    ADD(tmp,"[rcx]", "1000");
    ADD(tmp,"[rax+rax*2]", "1000");
    ADD(tmp,"[rcx+rax*2]", "1000");
    ADD(tmp,"[rax*2]", "1000");
    ADD(tmp,"[rax+rcx*8]", "1000");
    ADD(tmp,"[rcx+rcx*8]", "1000");
    ADD(tmp,"[rcx*8]", "1000");
    ADD(tmp,"[rax-520]", "1000");
    ADD(tmp,"[rcx-520]", "1000");
    ADD(tmp,"[rax+rax*2-520]", "1000");
    ADD(tmp,"[rcx+rax*2-520]", "1000");
    ADD(tmp,"[rax*2-520]", "1000");
    ADD(tmp,"[rax+rcx*8-520]", "1000");
    ADD(tmp,"[rcx+rcx*8-520]", "1000");
    ADD(tmp,"[rcx*8-520]", "1000");
    ADD(tmp,"[-520]", "1000");
    ADD(tmp,"[rax-100]", "1000");
    ADD(tmp,"[rcx-100]", "1000");
    ADD(tmp,"[rax+rax*2-100]", "1000");
    ADD(tmp,"[rcx+rax*2-100]", "1000");
    ADD(tmp,"[rax*2-100]", "1000");
    ADD(tmp,"[rax+rcx*8-100]", "1000");
    ADD(tmp,"[rcx+rcx*8-100]", "1000");
    ADD(tmp,"[rcx*8-100]", "1000");
    ADD(tmp,"[-100]", "1000");
    ADD(tmp,"[rax+0]", "1000");
    ADD(tmp,"[rcx+0]", "1000");
    ADD(tmp,"[rax+rax*2+0]", "1000");
    ADD(tmp,"[rcx+rax*2+0]", "1000");
    ADD(tmp,"[rax*2+0]", "1000");
    ADD(tmp,"[rax+rcx*8+0]", "1000");
    ADD(tmp,"[rcx+rcx*8+0]", "1000");
    ADD(tmp,"[rcx*8+0]", "1000");
    ADD(tmp,"[0]", "1000");
    ADD(tmp,"[rax+120]", "1000");
    ADD(tmp,"[rcx+120]", "1000");
    ADD(tmp,"[rax+rax*2+120]", "1000");
    ADD(tmp,"[rcx+rax*2+120]", "1000");
    ADD(tmp,"[rax*2+120]", "1000");
    ADD(tmp,"[rax+rcx*8+120]", "1000");
    ADD(tmp,"[rcx+rcx*8+120]", "1000");
    ADD(tmp,"[rcx*8+120]", "1000");
    ADD(tmp,"[120]", "1000");
    ADD(tmp,"[rax+1200]", "1000");
    ADD(tmp,"[rcx+1200]", "1000");
    ADD(tmp,"[rax+rax*2+1200]", "1000");
    ADD(tmp,"[rcx+rax*2+1200]", "1000");
    ADD(tmp,"[rax*2+1200]", "1000");
    ADD(tmp,"[rax+rcx*8+1200]", "1000");
    ADD(tmp,"[rcx+rcx*8+1200]", "1000");
    ADD(tmp,"[rcx*8+1200]", "1000");
    ADD(tmp,"[1200]", "1000");
    tmp.close();
}